# Create iperf
# This is a YAML file.

# This describes what is deployed by this template.
description: >
    HOT Template to create a new neutron network plus router to the
    public network, and then deploying three servers into the new
    (private) network. Template also assigns floating IP address to
    one of the servers so it is routable from the public network.

# This defines the minimum Heat version required by this template.
heat_template_version: 2015-10-15

# The parameters section gathers configuration from the user.
# It does not have to be in the beginning or the end of the document.
# Variables you can edit are defined here.
parameters:
    name_prefix:
        type: string
        description: Name prefix for all stack objects. Required.
    name_suffix:
        type: string
        description: Name suffix for all stack objects. Required.
    num_slaves:
        type: number
        description: Number of slave workers. One master worker by default.
        constraints:
            -   range: {min: 1}
        default: 1
    master_port:
        type: number
        description: Port for ray communication on master server.
        constraints:
            -   range: {min: 5000}
        default: 8686
    key_name:
        type: string
        description: Name of a KeyPair to enable SSH access to the instance
        default: keypair-9ca5de94b2324ca434b7fedc12fa72e4
        constraints:
            -   custom_constraint: nova.keypair
    reservation_id:
        # We have no default for this one
        type: string
        description: ID of the Blazar reservation to use for launching instances.
        constraints:
            -   custom_constraint: blazar.reservation
    image_name:
        type: string
        label: Image Name
        description: Image to be used by this instance (CentOS/RedHat/Fedora)
        default: CC-Ubuntu18.04
    flavor_name:
        type: string
        label: Flavor Name
        description: Flavor of the instance we are building (baremetal, kvm, etc)
        default: baremetal
    private_network_name:
        type: string
        label: Private Network Name
        description: Private network used by this instance
        default: my_network
    ip_subnet:
        label: Subnet in cidr
        type: string
        description: Cidr of the private network
        default: 192.168.100.0/24

# The resources section defines which OpenStack resources are to be deployed and
# how they should be configured. In this example, we will deploy 2 servers
# with iperf in each of them and then use a third to access them
resources:
    private_network:
        type: OS::Neutron::Net
        properties:
            name:
                str_replace:
                    template: prefix-network_name-suffix
                    params:
                        prefix: { get_param: name_prefix }
                        network_name: { get_param: private_network_name }
                        suffix: { get_param: name_suffix }

    private_subnet:
        type: OS::Neutron::Subnet
        properties:
            name: subnet
            cidr: { get_param: ip_subnet }
            network_id: { get_resource: private_network }
            # gateway_ip: { get_param: private_net_gateway }
            enable_dhcp: true

    router_interface:
        type: OS::Neutron::RouterInterface
        properties:
            router: { get_resource: router_to_ext }
            subnet: { get_resource: private_subnet }

    router_to_ext:
        type: OS::Neutron::Router
        properties:
            name:
                str_replace:
                    template: prefix-router-suffix
                    params:
                        prefix: { get_param: name_prefix }
                        suffix: { get_param: name_suffix }
            external_gateway_info:
                network: public

    # Master server
    master_floating_ip:
        type: OS::Nova::FloatingIP
        properties:
            pool: public

    master:
        type: OS::Nova::Server
        properties:
            name:
                str_replace:
                    template: prefix-master-suffix
                    params:
                        prefix: {get_param: name_prefix}
                        suffix: {get_param: name_suffix}
            flavor: { get_param: flavor_name }
            image: { get_param: image_name }
            key_name: { get_param: key_name }
            networks:
                -   network: { get_resource: private_network }
            scheduler_hints: { reservation: { get_param: reservation_id } }
            # This script is run once this server/instance is built
            user_data:
                str_replace:
                    template: |
                        #!/bin/sh
                        sudo apt-get update -y
                        sudo apt-get upgrade -y
                        python3 -m pip install --user --upgrade pip
                        git clone https://github.com/haochen3611/TwoSidedQueueNetwork.git && \
                        cd TwoSidedQueueNetwork && \
                        python3 -m pip install --user -r requirements.txt && \
                        exec $SHELL && \
                        ray start --head --port=$master_port_num
                    params:
                        $master_port_num: {get_param: master_port}

    master_ip_association:
        type: OS::Neutron::FloatingIPAssociation
        # These properties can be used later
        properties:
            floatingip_id: {get_resource: master_floating_ip}
            port_id: {get_attr: [master, addresses, {get_attr: [private_network, name]}, 0, port]}

    # slave server group
    slave_group:
        type: OS::Heat::ResourceGroup
        properties:
            count: {get_param: num_slaves}
            resource_def:
                type: OS::Nova::Server
                properties:
                    name:
                        str_replace:
                            template: prefix-slave-%index%-suffix
                            params:
                                prefix: {get_param: name_prefix}
                                suffix: {get_param: name_suffix}
                    flavor: { get_param: flavor_name }
                    image: { get_param: image_name }
                    key_name: { get_param: key_name }
                    networks:
                        -   network: { get_resource: private_network }
                    scheduler_hints: { reservation: { get_param: reservation_id } }
                    # This script is run once this server/instance is built
                    user_data:
                        str_replace:
                            template: |
                                #!/bin/bash
                                sudo apt-get update -y
                                sudo apt-get upgrade -y
                                python3 -m pip install --user --upgrade pip
                                git clone https://github.com/haochen3611/TwoSidedQueueNetwork.git && \
                                cd TwoSidedQueueNetwork && \
                                python3 -m pip install --user -r requirements.txt && \
                                exec $SHELL && \
                                ray start --address=$master_ip:$master_port_num
                            params:
                                $master_ip: { get_attr: [master, first_address] }
                                $master_port_num: {get_param: master_port}

outputs:
    master_private_ip:
        description: Private IP address for master server
        value: { get_attr: [ master, first_address ] }
    salve_private_ips:
        description: Private IP addresses for slave servers
        value: { get_attr: [ slave_group, first_address]}